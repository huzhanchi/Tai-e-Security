/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package org.oarmour.security.main;


import org.apache.velocity.Template;
import org.apache.velocity.VelocityContext;
import org.apache.velocity.app.VelocityEngine;
import org.oarmour.security.pojo.ControllerItem;
import org.oarmour.security.pojo.MappingItem;
import soot.*;
import soot.options.Options;
import soot.tagkit.AnnotationTag;
import soot.tagkit.Tag;
import soot.tagkit.VisibilityAnnotationTag;
import soot.util.Chain;

import java.io.FileWriter;
import java.io.IOException;
import java.io.StringWriter;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.Properties;


public class MockServlet4SpringMain {

    public static void main(String[] args) throws IOException {
        String sourceDirectory = args[0];

        G.reset();
            Options.v().set_prepend_classpath(true);
            Options.v().set_allow_phantom_refs(true);
            Options.v().set_soot_classpath(sourceDirectory);
            Options.v().set_output_format(Options.output_format_jimple);
            Options.v().set_process_dir(Collections.singletonList(sourceDirectory));
            Options.v().set_app(true);
            Scene.v().loadNecessaryClasses();
//            PackManager.v().runPacks();
            Chain<SootClass> ss = Scene.v().getApplicationClasses();

        List<ControllerItem> items = new ArrayList<>();
        for (SootClass s : ss) {
            String clzName = s.getType().getClassName();

            s.getTags().stream().forEach(tag -> {
                if (tag instanceof VisibilityAnnotationTag) {
                    for (AnnotationTag annotation : ((VisibilityAnnotationTag) tag).getAnnotations()) {
                        if (annotation.getType().contains("springframework/web/bind/annotation/RestController")) {
                            ControllerItem ctrItem = new ControllerItem(clzName.replaceFirst("BOOT-INF.classes.",""));
                            for (SootMethod method : s.getMethods()) {
//                                System.out.println(method.getTags());
                                for (Tag methodTag : method.getTags()) {
                                    if (methodTag instanceof  VisibilityAnnotationTag) {
                                        for (AnnotationTag annotationTag : ((VisibilityAnnotationTag) methodTag).getAnnotations()) {
                                            if (annotationTag.getType().contains("springframework/web/bind/annotation/GetMapping") || annotationTag.getType().contains("springframework/web/bind/annotation/RequestMapping")) {
                                                MappingItem item = new MappingItem(method.getName());
                                                for (Type parameterType : method.getParameterTypes()) {
                                                        item.addArg(parameterType.toString());
                                                }
                                                ctrItem.addMethod(item);
                                            }
                                        }
                                    }
                                }
                            }


                            items.add(ctrItem);
                        }
                    }
                }
                });
        }

        Properties pro = new Properties();
        pro.setProperty("file.resource.loader.path","src/main/resources");
        pro.setProperty("resource.loader","file");
        VelocityEngine velocityEngine = new VelocityEngine(pro);
        velocityEngine.init();
        Template t = velocityEngine.getTemplate("MyServlet.vm");

        VelocityContext context = new VelocityContext();
        context.put("controllerList", items);

        StringWriter writer = new StringWriter();
        t.merge( context, writer );

        FileWriter fw = new FileWriter(args[1]);
        fw.write(writer.toString());
        fw.flush();
        fw.close();
    }
}
